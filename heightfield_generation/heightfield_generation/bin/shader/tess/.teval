#version 420 core

//equal_spacing
//fractional_odd_spacing
//fractional_even_spacing
layout (triangles, fractional_odd_spacing, ccw) in;

out vec3 Pos;
out vec2 Tex;
flat out float Road;

float rand( vec2 n )
{ 
  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise( vec2 p )
{
  vec2 ip = floor(p);
  vec2 u = fract(p);
  u = u * u * (vec2(3.0, 3.0) - (u * 2.0));

  float res =
  mix(
      mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),
      mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);
  return res * res;
}

uniform mat4 VP;

vec3 GetNorm( vec3 p )
{
  float th = 0.001;

  vec3
    p1 = vec3(p.x + th, noise(vec2(p.x + th, p.z) / 3.0) * 3.0, p.z),
    p2 = vec3(p.x, noise(vec2(p.x, p.z + th) / 3.0) * 3.0, p.z + th);

  return normalize(cross(p2 - p, p1 - p));
}

in vec2 TexCoords[];

void main( void )
{
  vec4 pos =
    gl_in[0].gl_Position * gl_TessCoord.x +
    gl_in[1].gl_Position * gl_TessCoord.y +
    gl_in[2].gl_Position * gl_TessCoord.z;

  vec3
    p0 = gl_in[0].gl_Position.xyz,
    p1 = gl_in[1].gl_Position.xyz,
    p2 = gl_in[2].gl_Position.xyz;
  /*
  p0.y = noise(p0.xz / 3.0) * 3;
  p1.y = noise(p1.xz / 3.0) * 3;
  p2.y = noise(p2.xz / 3.0) * 3;
  */

  if (p0.y < -0.02 && p1.y < -0.02 && p2.y < -0.02)
    Road = 1;
  else
    Road = 0;

  if (pos.y >= 0)
    pos.y += (noise(pos.xz / 1.0) * 1.0);
  //else
  //  pos.y += (noise(gl_in[0].gl_Position.xz / 3.0) * gl_TessCoord.x + noise(gl_in[1].gl_Position.xz / 3.0) * gl_TessCoord.y + noise(gl_in[2].gl_Position.xz / 3.0) * gl_TessCoord.z);

  Pos = pos.xyz;
  Tex =
    TexCoords[0] * gl_TessCoord.x +
    TexCoords[1] * gl_TessCoord.y +
    TexCoords[2] * gl_TessCoord.z;
  //Norm = GetNorm(pos.xyz);

  gl_Position = VP * pos;
}