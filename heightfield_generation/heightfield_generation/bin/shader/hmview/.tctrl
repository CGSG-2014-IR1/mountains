#version 420

layout (vertices = 3) out;

uniform float TessFactor;

uniform vec3 CameraPos;

in vec2 Tex[];
out vec2 TexCoords[];

uniform mat4 VP;

float saturate( float x )
{
  return max(-1, min(1, x));
}

float CalcFactor( vec4 p0, vec4 p1 )
{
  vec4 pp0 = VP * p0, pp1 = VP * p1;
  /*
  pp0.x = saturate(pp0.x);
  pp0.y = saturate(pp0.y);
  pp1.x = saturate(pp0.x);
  pp1.y = saturate(pp1.y);
  */

  if (pp0.z <= -2.0 && pp1.z <= -2.0)
    return 0;
  float sdw = distance(pp0.xyz / pp0.w, pp1.xyz / pp1.w) * 0.7;
  float dw = 1.0 / min(1, distance(CameraPos, (p0 + p1).xyz / 2)) * sdw;
  float pw = abs(dot(normalize(p0 - p1).xyz, normalize((p0 + p1).xyz / 2 - CameraPos))) * sdw;
  
  return (dw + sdw + pw) * TessFactor;
}

void main( void )
{
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
  TexCoords[gl_InvocationID] = Tex[gl_InvocationID];

  barrier();

  gl_TessLevelOuter[2] = max(1, CalcFactor(gl_out[0].gl_Position, gl_out[1].gl_Position));  
  gl_TessLevelOuter[0] = max(1, CalcFactor(gl_out[1].gl_Position, gl_out[2].gl_Position));
  gl_TessLevelOuter[1] = max(1, CalcFactor(gl_out[2].gl_Position, gl_out[0].gl_Position));

  gl_TessLevelInner[0] = max(1, (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) / 3.0);
}