#version 420

layout (vertices = 3) out;

const float TessFactor = 63;
uniform int IfTess;

in vec2 Tex[];
out vec2 TexCoords[];
in int Id[];
out int InId[];

in vec2 P0[];
in vec2 P1[];
in vec2 H0[];
in vec2 H1[];

out vec2 InP0[];
out vec2 InP1[];
out vec2 InH0[];
out vec2 InH1[];

uniform mat4 MatrWVP;
uniform vec3 CameraPos;

float saturate( float x )
{
  return max(-1, min(1, x));
}

float CalcFactor( vec4 p0, vec4 p1 )
{
  vec4 pp0 = MatrWVP * p0, pp1 = MatrWVP * p1;
  pp0 /= pp0.w;
  pp1 /= pp1.w;
  /*
  pp0.x = saturate(pp0.x);
  pp0.y = saturate(pp0.y);
  pp1.x = saturate(pp0.x);
  pp1.y = saturate(pp1.y);
  */

  float sdw = distance(pp0.xy, pp1.xy) * 0.7;
  float dw = 1.0 / min(1, distance(CameraPos, (p0 + p1).xyz / 2)) * sdw;
  
  return min(64, (dw + sdw) * TessFactor + 1) * IfTess;
}

float CalcInnerFactor( vec4 p0, vec4 p1, vec4 p2 )
{
  vec3
    v0 = normalize((p1 - p0).xyz),
    v1 = normalize((p1 - p0).xyz);
  vec3 n = normalize(cross(v0, v1));
  return pow(1.0 - abs(dot(n, normalize((p0 + p1 + p2).xyz / 3.0 - CameraPos))), 4);
}

int chek( float a )
{
  if (a > 0)
    return 0;
  else
    return 1;
}

void main( void )
{
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
  TexCoords[gl_InvocationID] = Tex[gl_InvocationID];
  InId[gl_InvocationID] = Id[gl_InvocationID];
  
  InP0[gl_InvocationID] = P0[gl_InvocationID];
  InP1[gl_InvocationID] = P1[gl_InvocationID];
  InH0[gl_InvocationID] = H0[gl_InvocationID];
  InH1[gl_InvocationID] = H1[gl_InvocationID];
  
  barrier();

  vec4
    p0 = gl_out[0].gl_Position,
    p1 = gl_out[1].gl_Position,
    p2 = gl_out[2].gl_Position;

  gl_TessLevelOuter[2] = max(1, CalcFactor(p0, p1)) * chek(float(Id[0] + Id[1]));  
  gl_TessLevelOuter[0] = max(1, CalcFactor(p1, p2)) * chek(float(Id[2] + Id[1]));
  gl_TessLevelOuter[1] = max(1, CalcFactor(p2, p0)) * chek(float(Id[0] + Id[2]));
  
  if (gl_TessLevelOuter[2] == 0 || gl_TessLevelOuter[1] == 0 || gl_TessLevelOuter[0] == 0)
  {
    gl_TessLevelInner[0] = 1;
    gl_TessLevelOuter[2] = max(1, gl_TessLevelOuter[2]);
    gl_TessLevelOuter[0] = max(1, gl_TessLevelOuter[0]);
    gl_TessLevelOuter[1] = max(1, gl_TessLevelOuter[1]);
  }
  else
    gl_TessLevelInner[0] =
      (CalcInnerFactor(p0, p1, p2) * 63 * 0.5 +
          (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) / 3.0 * 0.5) * IfTess + 1;
}